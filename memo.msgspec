
namespace com.example
namespace cpp example
namespace ruby Example

message BasicTypeExample {
	1:  byte   f1
	2:  short  f2
	3:  int    f3
	4:  long   f4
	5:  ubyte  f5
	6:  ushort f6
	7:  uint   f7
	8:  ulong  f8
	9:  float  f9
	10: double f10
	11: bool   f11
	12: raw    f12
	13: string f13
}

message ContainerTypeExample {
	1: list<string> f1
	2: map<string,string> f2
	//3: set<string> f3
}

message OptionalExample {
	1: string f1           // required non-nullable
	2: required string f2  // required non-nullable
	3: optional string f3  // optional non-nullable
	4: int f4              // required non-nullable
	5: required int32 f5   // required non-nullable
	6: optional int32 f6   // optional non-nullable
}

message NullableExample {
	1: string? f1           // required nullable
	2: required string? f2  // required nullable
	3: optional string? f3  // optional nullable
	4: int? f4              // required nullable
	5: required int32? f5   // required nullable
	6: optional int32? f6   // optional nullable
}

message EmptyExample {
}

message DefaultExample {
	1: int32 f1 = 1212
	//2: string f2 = "test"
	//3: list<int16> f3 = [1,2,3]
	//4: map<string,int16> f4 = {"a":1, "b":10}
}

enum EnumExample {
	1: RED
	2: GREEN
	3: BLUE
}


exception SuperExceptionExample {
	1: string message
	2: int32 code
}

exception SubExceptionExample3 < SuperExceptionExample {
	3: raw key
}


message ObjectKey {
	1: int rsid
	2: raw key
}

interface Gateway:0 {
	raw get_data(1: raw key)
	ObjectKey add(1: raw key, 2: raw data, 3: map<raw,raw> attrs)
}

interface DataServer:0 {
	raw get(1: raw key)
	void set(1: raw key, 2: raw data)
}

service Gateway:0 {
	implements Gateway:0
}

service DataServer {
	implements Gateway:0
	implements DataServer:0
}


interface InterfaceExample:0 {
}

interface IfaceVersionExample:0 {
}

service TestService:0 {
	implements InterfaceExample:0
	implements IfaceVersionExample:0
}


service BasicServiceExample {
	string func1(1: string key, 2: string value)
	string func2()
	string? func3(1: string key, 2: string value)
	string? func4()
	void func5(1: string key, 2: string value)
}

service OptionalServiceExample {
	string func1(1: string key, 2: string value)
	string func2(1: string key, 2: optional string value)
	string func3(1: string? key, 2: optional string? value)
	string? func4(1: string key, 2: string value)
}

service ExceptionServiceExample {
	void func1() throws SubExceptionExample2, SubExceptionExample3
	void func2() throws BasicExceptionExample
}


