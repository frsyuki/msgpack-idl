
// example1.msgspec

namespace com.example
namespace cpp example
namespace ruby Example

message BasicTypeExample {
	1:  int8   f1
	2:  int16  f2
	3:  int32  f3
	4:  int64  f4
	5:  uint8  f5
	6:  uint16 f6
	7:  uint32 f7
	8:  uint64 f8
	9:  float  f9
	10: double f10
	11: bool   f11
	12: raw    f12
	13: string f13
	14: date   f14
}

message ContainerTypeExample {
	1: list<string> f1
	2: map<string,string> f2
	3: set<string> f3
}

message OptionalExample {
	1: string f1           // required non-nullable
	2: required string f2  // required non-nullable
	3: optional string f3  // optional non-nullable
	4: int32 f4            // required non-nullable
	5: required int32 f5   // required non-nullable
	6: optional int32 f6   // optional non-nullable
}

message NullableExample {
	1: string? f1           // required nullable
	2: required string? f2  // required nullable
	3: optional string? f3  // optional nullable
	4: int32? f4            // required nullable
	5: required int32? f5   // required nullable
	6: optional int32? f6   // optional nullable
}

message EmptyExample {
}


enum EnumExample {
	1: RED
	2: GREEN
	3: BLUE
}


typedef map<string,string> PropertyMap;

message TypedefExampel {
	1: PropertyMap f1
}


typedef<V> map<string,V> GenericStringMap;

message<V> GenericExample {
	1: V f1
	2: list<V> f2
	3: GenericExample<V> f3
}


message TypeSpecExample {
	1: list<string> f1
}

typespec cpp TypeSpecExample.f1 std::vector<std::string>

typespec cpp PropertyMap std::tr1::unordered_map<std::string,std::string>
typespec cpp GenericStringMap<V> std::vector<V>


exception BasicExceptionExample {
	1: string message
	2: int32 code
}

exception SuperExceptionExample {
	1: string message
	2: int32 code

	exception SubExceptionExample1 {
		3: string key
		4: raw value
	}

	exception SubExceptionExample2 {
		3: int32 flags

		exception SubSubExceptionExample {
			4: string value
		}
	}
}

exception SubExceptionExample3 < SuperExceptionExample {
	3: raw key
}


service BasicServiceExample {
	string func1(1: string key, 2: string value)
	string func2()
	string? func3(1: string key, 2: string value)
	string? func4()
	void func5(1: string key, 2: string value)
}

service OptionalServiceExample {
	string func1(1: string key, 2: string value)
	string func3(1: string key, 2: optional string value)
	string func2(1: string? key, 2: optional string? value)
	string? func4(1: string key, 2: string value)
}

service ExceptionServiceExample {
	void func1() throws SubExceptionExample2, SubExceptionExample3
	void func2() throws BasicExceptionExample
}

service VersionServiceExample {
	void func1(1: string key)   // version 0
	void func1:1(1: string key, 2: optional string? value)
	uint32? func1:2(1: string key, 2: optional string? value)
	void func2:0(1: string key)
	void func2:1(1: string key, 2: optional string? value)
	uint32? func2:2(1: string key, 2: optional string? value)
}


// example1-impl.msgspec

include example1.msgspec
